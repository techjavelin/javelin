openapi: 3.0.3
info:
  title: Javelin REST API
  version: 0.1.0
  description: >-
    Initial REST surface for Javelin.
    Includes health, vulnerability templates CRUD (API key auth), and migrations admin.
tags:
  - name: health
    description: Service health & readiness probes
  - name: vuln-templates
    description: Vulnerability template management (API key required)
  - name: migrations
    description: Administrative migration endpoints (restricted)
  - name: user-api-keys
    description: Authenticated user-managed API key lifecycle
x-tagGroups:
  - name: Platform
    tags: [health]
  - name: Vulnerability Templates
    tags: [vuln-templates]
  - name: Operations & Migrations
    tags: [migrations]
  - name: User Keys
    tags: [user-api-keys]
servers:
  - url: https://YOUR_REST_API_ID.execute-api.us-east-1.amazonaws.com/dev
    description: Dev stage
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
    CognitoAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    VulnerabilityTemplate:
      type: object
      properties:
        id: { type: string }
        title: { type: string, description: Human readable name }
        category:
          type: string
          description: Classification category
          enum: [AUTH, INPUT_VALIDATION, CRYPTO, CONFIG, ACCESS_CONTROL, OTHER]
        severity:
          type: string
          description: Current qualitative severity (after any risk derivation)
          enum: [CRITICAL, HIGH, MEDIUM, LOW, INFO]
        cvssVector: { type: string, description: Optional CVSS v3.x vector string }
        description: { type: string, description: Markdown description of the vulnerability }
        impact: { type: string, description: Markdown impact narrative }
        impactLevel:
          type: string
          description: Derived qualitative impact
          enum: [LOW, MEDIUM, HIGH, CRITICAL]
        likelihood:
          type: string
          description: Estimated likelihood
          enum: [VERY_LOW, LOW, MEDIUM, HIGH, VERY_HIGH]
        remediation: { type: string, description: Markdown remediation guidance }
        references:
          type: array
          items: { type: string }
          description: Reference URLs or identifiers
        tags:
          type: array
          items: { type: string }
          description: Free-form tagging labels
        createdBy: { type: string, readOnly: true }
        isGlobal: { type: boolean, description: Whether template is globally visible }
        createdAt: { type: string, format: date-time, readOnly: true }
        updatedAt: { type: string, format: date-time, readOnly: true }
      required: [id, title, category, severity, isGlobal]
      example:
        id: tpl_1234567890
        title: Insecure Direct Object Reference
        category: ACCESS_CONTROL
        severity: HIGH
        impactLevel: HIGH
        likelihood: MEDIUM
        cvssVector: CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N
        description: Improper access control allows attackers to enumerate resources.
        impact: Exposure of sensitive objects belonging to other tenants.
        remediation: Implement per-object authorization checks before returning resources.
        references: ["https://owasp.org/Top10/A01_2021-Broken_Access_Control/"]
        tags: [access-control, idor]
        isGlobal: false
        createdBy: user_abc
        createdAt: 2025-09-01T12:00:00Z
        updatedAt: 2025-09-05T15:22:00Z
    VulnerabilityTemplateCreate:
      type: object
      properties:
        title: { type: string }
        category: { type: string, enum: [AUTH, INPUT_VALIDATION, CRYPTO, CONFIG, ACCESS_CONTROL, OTHER] }
        severity: { type: string, enum: [CRITICAL, HIGH, MEDIUM, LOW, INFO] }
        isGlobal: { type: boolean }
        cvssVector: { type: string }
        description: { type: string }
        impact: { type: string }
        impactLevel: { type: string, enum: [LOW, MEDIUM, HIGH, CRITICAL] }
        likelihood: { type: string, enum: [VERY_LOW, LOW, MEDIUM, HIGH, VERY_HIGH] }
        remediation: { type: string }
        references: { type: array, items: { type: string } }
        tags: { type: array, items: { type: string } }
      required: [title, category, severity, isGlobal]
      example:
        title: Insecure Direct Object Reference
        category: ACCESS_CONTROL
        severity: HIGH
        impactLevel: HIGH
        likelihood: MEDIUM
        isGlobal: false
        tags: [access-control, idor]
    VulnerabilityTemplateUpdate:
      type: object
      description: All fields optional; omit read-only fields.
      properties:
        title: { type: string }
        category: { type: string, enum: [AUTH, INPUT_VALIDATION, CRYPTO, CONFIG, ACCESS_CONTROL, OTHER] }
        severity: { type: string, enum: [CRITICAL, HIGH, MEDIUM, LOW, INFO] }
        isGlobal: { type: boolean }
        cvssVector: { type: string }
        description: { type: string }
        impact: { type: string }
        impactLevel: { type: string, enum: [LOW, MEDIUM, HIGH, CRITICAL] }
        likelihood: { type: string, enum: [VERY_LOW, LOW, MEDIUM, HIGH, VERY_HIGH] }
        remediation: { type: string }
        references: { type: array, items: { type: string } }
        tags: { type: array, items: { type: string } }
    MigrationSummary:
      type: object
      properties:
        attempted: { type: integer }
        applied: { type: integer }
        skipped: { type: integer }
        latestId: { type: integer }
        failed:
          type: object
          nullable: true
          properties:
            id: { type: integer }
            name: { type: string }
            error: { type: string }
    UserApiKey:
      type: object
      description: User-owned API key metadata. Value only returned at creation.
      properties:
        id: { type: string }
        name: { type: string }
        createdDate: { type: string, format: date-time }
        value:
          type: string
          description: Present only in create response.
      required: [id]
    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
      required: [error]
    ErrorResponse:
      type: object
      properties:
        error: { type: string, description: Machine readable error code }
        message: { type: string, description: Human readable explanation }
        details:
          type: array
          description: Additional structured details (e.g., validation failures)
          items:
            type: object
            properties:
              field: { type: string }
              message: { type: string }
      required: [error]
      example:
        error: VALIDATION_ERROR
        message: One or more fields failed validation
        details:
          - field: title
            message: Title must be at least 5 characters
    NotFoundError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          example:
            error: NOT_FOUND
            message: Resource not found
    UnauthorizedError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          example:
            error: UNAUTHORIZED
            message: Missing or invalid credentials
    ForbiddenError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          example:
            error: FORBIDDEN
            message: You do not have access to this resource
    ConflictError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          example:
            error: CONFLICT
            message: A resource with this identifier already exists
    RateLimitError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          example:
            error: RATE_LIMITED
            message: Too many requests; please retry later
    InternalServerError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          example:
            error: INTERNAL_ERROR
            message: An unexpected error occurred
  responses:
    ValidationError:
      description: Input failed validation
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Unauthorized:
      description: Authentication is required or failed
      content:
        application/json:
          schema: { $ref: '#/components/schemas/UnauthorizedError' }
    Forbidden:
      description: Access is not allowed
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ForbiddenError' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/NotFoundError' }
    Conflict:
      description: Conflict with existing resource state
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ConflictError' }
    RateLimited:
      description: Too many requests
      headers:
        Retry-After:
          schema: { type: integer }
          description: Seconds until the client may retry
      content:
        application/json:
          schema: { $ref: '#/components/schemas/RateLimitError' }
    InternalError:
      description: Unexpected server error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/InternalServerError' }
paths:
  /health:
    get:
      operationId: getHealth
      summary: Health check
      description: Returns 200 if service is up.
      security: []
      tags: [health]
      responses:
        '200': { description: OK }
  /vuln-templates:
    get:
      operationId: getVulnTemplates
      summary: List vulnerability templates
      security: [ { ApiKeyAuth: [] } ]
      tags: [vuln-templates]
      description: Returns all vulnerability templates the caller can access.
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/VulnerabilityTemplate' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
    post:
      operationId: postVulnTemplates
      summary: Create vulnerability template
      security: [ { ApiKeyAuth: [] } ]
      tags: [vuln-templates]
      description: Creates a new vulnerability template document. Caller must supply required fields.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VulnerabilityTemplateCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/VulnerabilityTemplate' } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
  /vuln-templates/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string }
    get:
      operationId: getVulnTemplatesById
      summary: Get vulnerability template
      security: [ { ApiKeyAuth: [] } ]
      tags: [vuln-templates]
      description: Fetch a single vulnerability template by its identifier.
      responses:
        '200': { description: Found, content: { application/json: { schema: { $ref: '#/components/schemas/VulnerabilityTemplate' } } } }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
    put:
      operationId: putVulnTemplatesById
      summary: Update vulnerability template
      security: [ { ApiKeyAuth: [] } ]
      tags: [vuln-templates]
      description: Replace mutable fields of an existing vulnerability template.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VulnerabilityTemplateUpdate' }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/VulnerabilityTemplate' } } } }
        '400': { $ref: '#/components/responses/ValidationError' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
    delete:
      operationId: deleteVulnTemplatesById
      summary: Delete vulnerability template
      security: [ { ApiKeyAuth: [] } ]
      tags: [vuln-templates]
      description: Permanently remove a vulnerability template.
      responses:
        '200': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '429': { $ref: '#/components/responses/RateLimited' }
        '500': { $ref: '#/components/responses/InternalError' }
  /run-migrations:
    post:
      operationId: postRunMigrations
      summary: Trigger migrations (admin only)
      security: [ { CognitoAuth: [] } ]
      tags: [migrations]
      description: Forces execution of any pending migration scripts and returns a run summary.
      responses:
        '200': { description: Migration run summary, content: { application/json: { schema: { $ref: '#/components/schemas/MigrationSummary' } } } }
        '403': { description: Forbidden }
  /migrations-state:
    get:
      operationId: getMigrationsState
      summary: List applied migrations (admin only)
      security: [ { CognitoAuth: [] } ]
      tags: [migrations]
      description: Provides a snapshot of migration history and status.
      responses:
        '200': { description: Summaries }
        '403': { description: Forbidden }
  /user-api-keys:
    get:
      operationId: getUserApiKeys
      summary: List user API keys (no secret values)
      security: [ { CognitoAuth: [] } ]
      tags: [user-api-keys]
      description: Lists API key metadata for the authenticated user (secret values are never returned).
      responses:
        '200':
          description: List of keys
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/UserApiKey' }
        '401': { description: Unauthorized }
    post:
      operationId: postUserApiKeys
      summary: Create a new user API key
      security: [ { CognitoAuth: [] } ]
      tags: [user-api-keys]
      description: Creates a new API key under the caller's account, returning the secret value once.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
      responses:
        '201':
          description: Created key (includes value once)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserApiKey' }
        '400':
          description: Key limit exceeded or validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
        '401': { description: Unauthorized }
  /user-api-keys/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string }
    delete:
      operationId: deleteUserApiKeysById
      summary: Delete a user API key
      security: [ { CognitoAuth: [] } ]
      tags: [user-api-keys]
      description: Revokes a user-managed API key immediately.
      responses:
        '200': { description: Deleted }
        '401': { description: Unauthorized }
        '404': { description: Not found }
