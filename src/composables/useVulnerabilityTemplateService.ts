import { generateClient } from 'aws-amplify/data'
import type { Schema } from '../../amplify/data/resource'
import { useAuthorization } from './useAuthorization'
import { useAuth } from './useAuth'

// Service layer for VulnerabilityTemplate after removing owner rule.
export function useVulnerabilityTemplateService() {
  const client = generateClient<Schema>()
  const { has, primeContext } = useAuthorization()
  const { currentUser, loadCurrentUser } = useAuth()

  async function ensureUser() {
    if (!currentUser.value) await loadCurrentUser()
  }

  function checkEditPermissions(template: Schema['VulnerabilityTemplate']['type']) {
    // If global template, require platform-level admin (admin group) or pentester create/update rights.
    // We reuse capability ENG.MANAGE or APP.MANAGE as proxy; could introduce dedicated capability later.
    // For now: admin group or pentester group can modify. has() will return true for admin automatically.
  }

  async function updateTemplate(input: Partial<Schema['VulnerabilityTemplate']['type']> & { id: string }) {
    await ensureUser()
    const existing = await client.models.VulnerabilityTemplate.get({ id: input.id })
    if (!existing.data) throw new Error('Template not found')
    // Prime minimal context if needed (none currently; template not scoped). Could add org/app context later.
    // Authorization: rely on groups at this stage (handled by data rules). Additional business constraints could go here.
    const { id, ...rest } = input
    return client.models.VulnerabilityTemplate.update({ id, ...rest })
  }

  async function deleteTemplate(id: string) {
    await ensureUser()
    const existing = await client.models.VulnerabilityTemplate.get({ id })
    if (!existing.data) throw new Error('Template not found')
    return client.models.VulnerabilityTemplate.delete({ id })
  }

  return {
    updateTemplate,
    deleteTemplate
  }
}
