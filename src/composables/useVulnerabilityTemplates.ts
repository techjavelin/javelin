import { ref } from 'vue'
import { generateClient } from 'aws-amplify/data'
import type { Schema } from '../../amplify/data/resource'
import { withAuth } from '../amplifyClient'
import { normalizeError } from './useError'

const client = generateClient<Schema>()

export function useVulnerabilityTemplates() {
  const templates = ref<Schema['VulnerabilityTemplate']['type'][]>([])
  const loading = ref(false)
  const error = ref<string>('')

  async function list() {
    loading.value = true
    error.value = ''
    try {
      const res = await client.models.VulnerabilityTemplate.list(withAuth({}))
      templates.value = res.data || []
    } catch (e:any) {
      error.value = normalizeError(e,'Failed to load templates').message
    } finally {
      loading.value = false
    }
  }

  async function create(input: Partial<Schema['VulnerabilityTemplate']['type']>) {
    // Build base payload
    const base: any = {
      title: input.title!,
      category: (input.category as any) || 'OTHER',
      severity: (input.severity as any) || 'MEDIUM',
      description: input.description || '',
      remediation: input.remediation || '',
      impact: input.impact || '',
      likelihood: input.likelihood || '',
      references: input.references || [],
      tags: input.tags || [],
      cvssVector: input.cvssVector || '',
      owaspCategory: input.owaspCategory || '',
      isGlobal: input.isGlobal ?? false
    }
    // Include impactLevel only if provided; retry without if backend rejects
    if ((input as any).impactLevel !== undefined) base.impactLevel = (input as any).impactLevel || ''
    try {
      let res = await client.models.VulnerabilityTemplate.create(withAuth(base))
      if (!res.data && base.impactLevel) {
        // Retry if error suggests unknown field (GraphQL input mismatch) by removing impactLevel
        // (Some environments may not have been redeployed yet.)
      }
      if (res.data) { templates.value.push(res.data); return res.data }
      return res.data
    } catch (e: any) {
      const msg = (e?.errors?.[0]?.message || e.message || '').toLowerCase()
      if (base.impactLevel && msg.includes('not defined') && msg.includes('impactlevel')) {
        // Remove and retry once
        delete base.impactLevel
        try {
          const retry = await client.models.VulnerabilityTemplate.create(withAuth(base))
          if (retry.data) templates.value.push(retry.data)
          return retry.data
        } catch (retryErr: any) {
          error.value = normalizeError(retryErr,'Failed to create template').message
          return null
        }
      }
      error.value = normalizeError(e,'Failed to create template').message
      return null
    }
  }

  async function update(id: string, patch: Partial<Schema['VulnerabilityTemplate']['type']>) {
    try {
      const res = await client.models.VulnerabilityTemplate.update(withAuth({ id, ...patch }))
      if (res.data) {
        const idx = templates.value.findIndex(t => t.id === id)
        if (idx >= 0) templates.value[idx] = res.data
      }
      return res.data
    } catch (e:any) {
      error.value = normalizeError(e,'Failed to update template').message
      return null
    }
  }

  async function remove(id: string) {
    try {
      await client.models.VulnerabilityTemplate.delete(withAuth({ id }))
      templates.value = templates.value.filter(t => t.id !== id)
    } catch (e:any) {
      error.value = normalizeError(e,'Failed to delete template').message
    }
  }

  return { templates, loading, error, list, create, update, remove }
}
