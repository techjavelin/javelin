<template>
  <div class="dashboard-layout">
    <!-- Sidebar Navigation -->
    <AdminSidebar @toggle="handleSidebarToggle" />

    <!-- Main Content Area -->
    <div class="dashboard-content" :class="{ 'sidebar-collapsed': sidebarCollapsed }">
      <!-- Header -->
      <header class="dashboard-header no-bg">
        <div class="header-content">
          <div class="header-left">
            <slot name="header">
              <h1 class="dashboard-title">
                <font-awesome-icon :icon="['fas', 'tachometer-alt']" class="dashboard-svg-icon" />
                Dashboard Overview
              </h1>
            </slot>
          </div>
          <div class="header-right-group">
            <SearchComponent />
            <n-switch v-model:value="isDark" @update:value="toggleTheme" class="theme-switcher-naive">
              <template #checked>
                <font-awesome-icon :icon="['fas', 'moon']" />
              </template>
              <template #unchecked>
                <font-awesome-icon :icon="['fas', 'sun']" />
              </template>
            </n-switch>
            <button class="app-menu-trigger" @click="showAppMenu = true">
              <font-awesome-icon :icon="['fas', 'th-large']" />
            </button>
            <AppContextMenu v-if="showAppMenu" :visible="true" />
          </div>
        </div>
      </header>

      <!-- Main Content -->
      <main class="dashboard-main">
        <slot />
      </main>
    </div>
  </div>
</template>

<script setup>
import { ref, watch, onMounted } from 'vue'
import AdminSidebar from '../components/AdminSidebar.vue'
import AppContextMenu from '../components/AppContextMenu.vue'
import SearchComponent from '../components/SearchComponent.vue'
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'
import { library } from '@fortawesome/fontawesome-svg-core'
import { faSun, faMoon, faThLarge, faTachometerAlt } from '@fortawesome/free-solid-svg-icons'
import { NSwitch } from 'naive-ui'
library.add(faSun, faMoon, faThLarge, faTachometerAlt)

const isDark = ref(true)
function toggleTheme() {
  isDark.value = !isDark.value
  document.documentElement.classList.toggle('dark-theme', isDark.value)
  document.documentElement.classList.toggle('light-theme', !isDark.value)
  localStorage.setItem('theme', isDark.value ? 'dark' : 'light')
}
onMounted(() => {
  const saved = localStorage.getItem('theme')
  if (saved === 'light') {
    isDark.value = false
    document.documentElement.classList.add('light-theme')
    document.documentElement.classList.remove('dark-theme')
  } else {
    isDark.value = true
    document.documentElement.classList.add('dark-theme')
    document.documentElement.classList.remove('light-theme')
  }
})

const showAppMenu = ref(false)
const sidebarCollapsed = ref(false)
function handleSidebarToggle(collapsed) {
  sidebarCollapsed.value = collapsed
}
</script>

<style scoped>
.dashboard-layout {
  display: flex;
  flex-direction: row;
  min-height: 100vh;
  background: #181e2a;
}
.dashboard-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  padding: 2rem 0;
  background: #181e2a;
  min-height: 0;
  height: 100%;
  box-sizing: border-box;
  margin-left: 280px;
}
.sidebar-collapsed.dashboard-content {
  margin-left: 80px;
}
.dashboard-header {
  width: 100%;
  box-sizing: border-box;
  background: white;
  border-bottom: 1px solid #e9ecef;
  padding: 1rem 2rem;
}
.header-content {
  width: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  gap: 2rem;
}
.header-left {
  display: flex;
  align-items: center;
}
.header-right-group {
  display: flex;
  align-items: center;
  gap: 1rem;
}
.dashboard-main > * {
  width: 100%;
  max-width: 100vw;
}
.app-menu-trigger {
  background: none;
  border: none;
  color: #90caf9;
  font-size: 1.5rem;
  cursor: pointer;
  margin-left: 0.5rem;
}
</style>
