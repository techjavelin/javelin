import { describe, it, expect, beforeEach, vi } from 'vitest'

// Mock Amplify data client generateClient before importing composables
vi.mock('aws-amplify/data', () => {
  return {
    generateClient: () => ({
      models: {
        Engagement: {
          list: vi.fn().mockResolvedValue({ data: [ { id: 'e1', title: 'Eng 1', phase: 'PLANNING', status: 'ACTIVE' } ] }),
          get: vi.fn().mockResolvedValue({ data: { id: 'e1', title: 'Eng 1', phase: 'PLANNING', status: 'ACTIVE' } }),
          // Use valid phase enum (e.g., TESTING) instead of non-existent EXECUTION
          update: vi.fn().mockResolvedValue({ data: { id: 'e1', title: 'Eng 1', phase: 'TESTING', status: 'ACTIVE' } })
        },
        VulnerabilityFinding: {
          list: vi.fn().mockResolvedValue({ data: [ { id: 'f1', engagementId: 'e1', applicationId: 'a1', title: 'XSS', severity: 'HIGH', status: 'OPEN' } ] }),
          create: vi.fn().mockResolvedValue({ data: { id: 'f2', engagementId: 'e1', applicationId: 'a1', title: 'SQLi', severity: 'CRITICAL', status: 'OPEN' } }),
          update: vi.fn().mockResolvedValue({ data: { id: 'f1', engagementId: 'e1', applicationId: 'a1', title: 'XSS', severity: 'HIGH', status: 'IN_PROGRESS' } })
        },
        ArtifactLink: {
          list: vi.fn().mockResolvedValue({ data: [ { id: 'a1', engagementId: 'e1', organizationId: 'o1', provider: 'PANDADOC', externalId: 'doc1', name: 'NDA 1' } ] }),
          create: vi.fn().mockResolvedValue({ data: { id: 'a2', engagementId: 'e1', organizationId: 'o1', provider: 'PANDADOC', externalId: 'doc2', name: 'SOW 1' } }),
          update: vi.fn().mockResolvedValue({ data: { id: 'a1', engagementId: 'e1', organizationId: 'o1', provider: 'PANDADOC', externalId: 'doc1', name: 'NDA 1 (rev)' } })
        }
      }
    })
  }
})

// Mock useAuthorization to control capability checks
vi.mock('@/composables/useAuthorization', async () => {
  return {
    useAuthorization: () => ({
      has: (cap: string) => mockCaps.has(cap),
      primeContext: vi.fn(),
      ROLE_CAPS: {}
    }),
    resetAuthorizationCache: () => {}
  }
})

import { useEngagements } from '@/composables/useEngagements'
import { useFindings } from '@/composables/useFindings'
import { useArtifacts } from '@/composables/useArtifacts'

const mockCaps = new Set<string>()

describe('Pentest Portal Integration (composables)', () => {
  beforeEach(() => {
    mockCaps.clear()
  })

  it('lists engagements and updates state when permitted', async () => {
    mockCaps.add('ENG.MANAGE')
    const { list, items, updateState } = useEngagements()
    await list()
  expect(items?.value?.length).toBe(1)
  const updated = await updateState('e1', { phase: 'TESTING' as any })
  expect(updated?.phase).toBe('TESTING')
  })

  it('blocks engagement state update without permission', async () => {
    const { updateState } = useEngagements()
    await expect(updateState('e1', { phase: 'REPORTING' })).rejects.toThrow(/ENG.MANAGE/)
  })

  it('lists findings, allows create/update with ENG.UPDATE_FINDING', async () => {
    const { listByEngagement, findings, create, update } = useFindings()
    await listByEngagement('e1')
    expect(findings.value.length).toBe(1)
    mockCaps.add('ENG.UPDATE_FINDING')
  const created = await create({ engagementId: 'e1', applicationId: 'a1', title: 'SQLi', severity: 'HIGH', status: 'OPEN', description: '', impact: '', reproduction: '', evidence: undefined, remediation: '', references: [], affectedAssets: [], cvssVector: '', cvssScore: 0, createdBy: 'u1', templateId: undefined } as any)
    expect(created?.title).toBe('SQLi')
    const upd = await update('f1', 'e1', { status: 'IN_PROGRESS' })
    expect(upd?.status).toBe('IN_PROGRESS')
  })

  it('prevents finding create without capability', async () => {
    const { create } = useFindings()
  await expect(create({ engagementId: 'e1', applicationId: 'a1', title: 'SQLi', severity: 'HIGH', status: 'OPEN', description: '', impact: '', reproduction: '', evidence: undefined, remediation: '', references: [], affectedAssets: [], cvssVector: '', cvssScore: 0, createdBy: 'u1', templateId: undefined } as any)).rejects.toThrow(/ENG.UPDATE_FINDING/)
  })

  it('lists artifacts and allows create/update with ENG.MANAGE', async () => {
    const { listByEngagement, artifacts, create, update } = useArtifacts()
    await listByEngagement('e1')
    expect(artifacts.value.length).toBe(1)
    mockCaps.add('ENG.MANAGE')
  const created = await create({ engagementId: 'e1', organizationId: 'o1', provider: 'PANDADOC', externalId: 'doc2', name: 'SOW 1' } as any)
    expect(created?.name).toMatch(/SOW/)
    const upd = await update('a1', 'e1', { name: 'NDA 1 (rev)' })
    expect(upd?.name).toContain('(rev)')
  })

  it('prevents artifact create without ENG.MANAGE', async () => {
    const { create } = useArtifacts()
  await expect(create({ engagementId: 'e1', organizationId: 'o1', provider: 'PANDADOC', externalId: 'doc2', name: 'SOW 1' } as any)).rejects.toThrow(/ENG.MANAGE/)
  })
})
